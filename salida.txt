#include <stdio.h>
#include <math.h>
float HEAP[82000];
float STACK[82000];
float P;
float H;
float t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78, t79, t80, t81, t82, t83, t84, t85, t86, t87, t88, t89, t90, t91, t92, t93, t94, t95, t96, t97, t98, t99, t100, t101, t102, t103, t104, t105, t106, t107, t108, t109, t110, t111, t112, t113, t114, t115, t116, t117, t118, t119, t120, t121, t122, t123, t124, t125, t126, t127, t128, t129, t130, t131, t132, t133, t134, t135, t136, t137;

void proc_printString(){
t84=P+1;
t85=STACK[(int)t84];
L17:
t86=HEAP[(int)t85];
if(t86!=-1) goto L18;
goto L19;
L18:
printf("%c",(int)t86);
t85=t85 + 1;
goto L17;
L19:
return;
}

void f (){
t0=P+1;
t1=STACK[(int)t0];
STACK[(int)t0]=t1;//DECLARACION DEL PARAMETRO n
//--------<
////INICIO DE LLAMADAn
t3=STACK[(int)t0];
if(t3<2) goto L1;
goto L2;
//INICIO DE IF PRIMARIO
L1:
STACK[(int)P]=1;
goto L0;
goto L3;
L2:
//INICIO DE BOOLEANO
if(1==1) goto L4;
goto L5;
//FIN DE BOOLEANO 0-0
//INICIO DE IF ELSE
L4:
//EJECUTANDO PARAMETROS
////INICIO DE LLAMADAn
t6=STACK[(int)t0];
t5=t6-1;
//INICIANDO EL RESGUARDO DE LAS POSICIONES
t8=STACK[(int)81999];
t8=t8+1;
t7=81999-t8;
t9=STACK[(int)t0];
STACK[(int)81999]=t8;
STACK[(int)t7]=t9;
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t10=P;//GUARDADO DEL VALOR DE P
t11=P+1;
STACK[(int)t11]=t5;
f();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
t12=STACK[(int)81999];
t13=81999-t12;
t14=STACK[(int)t13];
STACK[(int)t0]=t14;
t12=t12-1;
STACK[(int)81999]=t12;
//FIN DE LA RECUPERACION DE LAS POSICIONES
t15=STACK[(int)P];//RETORNO DE f
P=t10;//RECUPERACION DEL VALOR DE P
////INICIO DE LLAMADAn
t16=STACK[(int)t0];
t4=t16*t15;
STACK[(int)P]=t4;
goto L0;
goto L3;
L5:
//SALIDA DE IF
L3:
L0:
return;
}
void ack (){
t17=P+1;
t18=STACK[(int)t17];
STACK[(int)t17]=t18;//DECLARACION DEL PARAMETRO m
t19=P+2;
t20=STACK[(int)t19];
STACK[(int)t19]=t20;//DECLARACION DEL PARAMETRO n
//-------------==--------
////INICIO DE LLAMADAm
t22=STACK[(int)t17];
if(t22==0) goto L7;
goto L8;
//INICIO DE IF PRIMARIO
L7:
////INICIO DE LLAMADAn
t24=STACK[(int)t19];
t23=t24+1;
STACK[(int)P]=t23;
goto L6;
goto L9;
L8:
//-------------==--------
////INICIO DE LLAMADAn
t26=STACK[(int)t19];
if(t26==0) goto L10;
goto L11;
//INICIO DE IF ELSE
L10:
//EJECUTANDO PARAMETROS
////INICIO DE LLAMADAm
t28=STACK[(int)t17];
t27=t28-1;
//INICIANDO EL RESGUARDO DE LAS POSICIONES
t30=STACK[(int)81999];
t30=t30+1;
t29=81999-t30;
t31=STACK[(int)t17];
STACK[(int)81999]=t30;
STACK[(int)t29]=t31;
t33=STACK[(int)81999];
t33=t33+1;
t32=81999-t33;
t34=STACK[(int)t19];
STACK[(int)81999]=t33;
STACK[(int)t32]=t34;
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t35=P;//GUARDADO DEL VALOR DE P
t36=P+1;
STACK[(int)t36]=t27;
t37=P+2;
STACK[(int)t37]=1;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
t38=STACK[(int)81999];
t39=81999-t38;
t40=STACK[(int)t39];
STACK[(int)t17]=t40;
t38=t38-1;
STACK[(int)81999]=t38;
t41=STACK[(int)81999];
t42=81999-t41;
t43=STACK[(int)t42];
STACK[(int)t19]=t43;
t41=t41-1;
STACK[(int)81999]=t41;
//FIN DE LA RECUPERACION DE LAS POSICIONES
t44=STACK[(int)P];//RETORNO DE ack
P=t35;//RECUPERACION DEL VALOR DE P
STACK[(int)P]=t44;
goto L6;
goto L9;
L11:
//INICIO DE BOOLEANO
if(1==1) goto L12;
goto L13;
//FIN DE BOOLEANO 0-0
//INICIO DE IF ELSE
L12:
//EJECUTANDO PARAMETROS
////INICIO DE LLAMADAm
t46=STACK[(int)t17];
t45=t46-1;
//EJECUTANDO PARAMETROS
////INICIO DE LLAMADAm
t47=STACK[(int)t17];
////INICIO DE LLAMADAn
t49=STACK[(int)t19];
t48=t49-1;
//INICIANDO EL RESGUARDO DE LAS POSICIONES
t51=STACK[(int)81999];
t51=t51+1;
t50=81999-t51;
t52=STACK[(int)t17];
STACK[(int)81999]=t51;
STACK[(int)t50]=t52;
t54=STACK[(int)81999];
t54=t54+1;
t53=81999-t54;
t55=STACK[(int)t19];
STACK[(int)81999]=t54;
STACK[(int)t53]=t55;
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t56=P;//GUARDADO DEL VALOR DE P
t57=P+1;
STACK[(int)t57]=t47;
t58=P+2;
STACK[(int)t58]=t48;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
t59=STACK[(int)81999];
t60=81999-t59;
t61=STACK[(int)t60];
STACK[(int)t17]=t61;
t59=t59-1;
STACK[(int)81999]=t59;
t62=STACK[(int)81999];
t63=81999-t62;
t64=STACK[(int)t63];
STACK[(int)t19]=t64;
t62=t62-1;
STACK[(int)81999]=t62;
//FIN DE LA RECUPERACION DE LAS POSICIONES
t65=STACK[(int)P];//RETORNO DE ack
P=t56;//RECUPERACION DEL VALOR DE P
//INICIANDO EL RESGUARDO DE LAS POSICIONES
t67=STACK[(int)81999];
t67=t67+1;
t66=81999-t67;
t68=STACK[(int)t17];
STACK[(int)81999]=t67;
STACK[(int)t66]=t68;
t70=STACK[(int)81999];
t70=t70+1;
t69=81999-t70;
t71=STACK[(int)t19];
STACK[(int)81999]=t70;
STACK[(int)t69]=t71;
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t72=P;//GUARDADO DEL VALOR DE P
t73=P+1;
STACK[(int)t73]=t45;
t74=P+2;
STACK[(int)t74]=t65;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
t75=STACK[(int)81999];
t76=81999-t75;
t77=STACK[(int)t76];
STACK[(int)t17]=t77;
t75=t75-1;
STACK[(int)81999]=t75;
t78=STACK[(int)81999];
t79=81999-t78;
t80=STACK[(int)t79];
STACK[(int)t19]=t80;
t78=t78-1;
STACK[(int)81999]=t78;
//FIN DE LA RECUPERACION DE LAS POSICIONES
t81=STACK[(int)P];//RETORNO DE ack
P=t72;//RECUPERACION DEL VALOR DE P
STACK[(int)P]=t81;
goto L6;
goto L9;
L13:
//SALIDA DE IF
L9:
L6:
return;
}

void main (){
//INICIO DE PRINT
//INICIO DE STRING
t82=H;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t82==-1) goto L15;
P=P+1;
t83=P+1;
STACK[(int)t83]=t82;
proc_printString();
P=P-1;
goto L16;
L15:
L16:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t87=H;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=65;//A
H=H+1;
HEAP[(int)H]=82;//R
H=H+1;
HEAP[(int)H]=67;//C
H=H+1;
HEAP[(int)H]=72;//H
H=H+1;
HEAP[(int)H]=73;//I
H=H+1;
HEAP[(int)H]=86;//V
H=H+1;
HEAP[(int)H]=79;//O
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=82;//R
H=H+1;
HEAP[(int)H]=69;//E
H=H+1;
HEAP[(int)H]=67;//C
H=H+1;
HEAP[(int)H]=85;//U
H=H+1;
HEAP[(int)H]=82;//R
H=H+1;
HEAP[(int)H]=83;//S
H=H+1;
HEAP[(int)H]=73;//I
H=H+1;
HEAP[(int)H]=86;//V
H=H+1;
HEAP[(int)H]=79;//O
H=H+1;
HEAP[(int)H]=83;//S
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t87==-1) goto L20;
P=P+1;
t88=P+1;
STACK[(int)t88]=t87;
proc_printString();
P=P-1;
goto L21;
L20:
L21:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t89=H;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=45;//-
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t89==-1) goto L22;
P=P+1;
t90=P+1;
STACK[(int)t90]=t89;
proc_printString();
P=P-1;
goto L23;
L22:
L23:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t91=H;
HEAP[(int)H]=70;//F
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=116;//t
H=H+1;
HEAP[(int)H]=111;//o
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=105;//i
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=108;//l
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=54;//6
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t91==-1) goto L24;
P=P+1;
t92=P+1;
STACK[(int)t92]=t91;
proc_printString();
P=P-1;
goto L25;
L24:
L25:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t93=P;//GUARDADO DEL VALOR DE P
t94=P+1;
STACK[(int)t94]=6;
f();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t95=STACK[(int)P];//RETORNO DE f
P=t93;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t95);
//INICIO DE STRING
t96=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t96==-1) goto L26;
P=P+1;
t97=P+1;
STACK[(int)t97]=t96;
proc_printString();
P=P-1;
goto L27;
L26:
L27:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t98=H;
HEAP[(int)H]=70;//F
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=116;//t
H=H+1;
HEAP[(int)H]=111;//o
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=105;//i
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=108;//l
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=52;//4
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t98==-1) goto L28;
P=P+1;
t99=P+1;
STACK[(int)t99]=t98;
proc_printString();
P=P-1;
goto L29;
L28:
L29:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t100=P;//GUARDADO DEL VALOR DE P
t101=P+1;
STACK[(int)t101]=4;
f();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t102=STACK[(int)P];//RETORNO DE f
P=t100;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t102);
//INICIO DE STRING
t103=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t103==-1) goto L30;
P=P+1;
t104=P+1;
STACK[(int)t104]=t103;
proc_printString();
P=P-1;
goto L31;
L30:
L31:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t105=H;
HEAP[(int)H]=70;//F
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=116;//t
H=H+1;
HEAP[(int)H]=111;//o
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=105;//i
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=108;//l
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=51;//3
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t105==-1) goto L32;
P=P+1;
t106=P+1;
STACK[(int)t106]=t105;
proc_printString();
P=P-1;
goto L33;
L32:
L33:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t107=P;//GUARDADO DEL VALOR DE P
t108=P+1;
STACK[(int)t108]=3;
f();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t109=STACK[(int)P];//RETORNO DE f
P=t107;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t109);
//INICIO DE STRING
t110=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t110==-1) goto L34;
P=P+1;
t111=P+1;
STACK[(int)t111]=t110;
proc_printString();
P=P-1;
goto L35;
L34:
L35:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t112=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t112==-1) goto L36;
P=P+1;
t113=P+1;
STACK[(int)t113]=t112;
proc_printString();
P=P-1;
goto L37;
L36:
L37:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t114=H;
HEAP[(int)H]=65;//A
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=107;//k
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=109;//m
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=110;//n
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=51;//3
H=H+1;
HEAP[(int)H]=44;//,
H=H+1;
HEAP[(int)H]=48;//0
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t114==-1) goto L38;
P=P+1;
t115=P+1;
STACK[(int)t115]=t114;
proc_printString();
P=P-1;
goto L39;
L38:
L39:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t116=P;//GUARDADO DEL VALOR DE P
t117=P+1;
STACK[(int)t117]=3;
t118=P+2;
STACK[(int)t118]=0;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t119=STACK[(int)P];//RETORNO DE ack
P=t116;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t119);
//INICIO DE STRING
t120=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t120==-1) goto L40;
P=P+1;
t121=P+1;
STACK[(int)t121]=t120;
proc_printString();
P=P-1;
goto L41;
L40:
L41:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t122=H;
HEAP[(int)H]=65;//A
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=107;//k
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=109;//m
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=110;//n
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=50;//2
H=H+1;
HEAP[(int)H]=44;//,
H=H+1;
HEAP[(int)H]=56;//8
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t122==-1) goto L42;
P=P+1;
t123=P+1;
STACK[(int)t123]=t122;
proc_printString();
P=P-1;
goto L43;
L42:
L43:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t124=P;//GUARDADO DEL VALOR DE P
t125=P+1;
STACK[(int)t125]=2;
t126=P+2;
STACK[(int)t126]=8;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t127=STACK[(int)P];//RETORNO DE ack
P=t124;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t127);
//INICIO DE STRING
t128=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t128==-1) goto L44;
P=P+1;
t129=P+1;
STACK[(int)t129]=t128;
proc_printString();
P=P-1;
goto L45;
L44:
L45:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
//INICIO DE PRINT
//INICIO DE STRING
t130=H;
HEAP[(int)H]=65;//A
H=H+1;
HEAP[(int)H]=99;//c
H=H+1;
HEAP[(int)H]=107;//k
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=114;//r
H=H+1;
HEAP[(int)H]=109;//m
H=H+1;
HEAP[(int)H]=97;//a
H=H+1;
HEAP[(int)H]=110;//n
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=100;//d
H=H+1;
HEAP[(int)H]=101;//e
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=50;//2
H=H+1;
HEAP[(int)H]=44;//,
H=H+1;
HEAP[(int)H]=49;//1
H=H+1;
HEAP[(int)H]=32;// 
H=H+1;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t130==-1) goto L46;
P=P+1;
t131=P+1;
STACK[(int)t131]=t130;
proc_printString();
P=P-1;
goto L47;
L46:
L47:
//EJECUTANDO PARAMETROS
//INICIANDO EL RESGUARDO DE LAS POSICIONES
//FIN DEL RESGUARDO DE LAS POSICIONES
//INICIO DE TRASLADO DE PARAMETROS
t132=P;//GUARDADO DEL VALOR DE P
t133=P+1;
STACK[(int)t133]=2;
t134=P+2;
STACK[(int)t134]=1;
ack();
//INICIO DE LA RECUPERACION DE LAS POSICIONES
//FIN DE LA RECUPERACION DE LAS POSICIONES
t135=STACK[(int)P];//RETORNO DE ack
P=t132;//RECUPERACION DEL VALOR DE P
printf("%d",(int)t135);
//INICIO DE STRING
t136=H;
HEAP[(int)H]=-1;
H=H+1;
//FIN DE STRING
if(t136==-1) goto L48;
P=P+1;
t137=P+1;
STACK[(int)t137]=t136;
proc_printString();
P=P-1;
goto L49;
L48:
L49:
printf("%c",10);//SALTO DE LINEA
//FIN DE PRINT
L14:
return;
}
